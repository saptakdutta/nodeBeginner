import { Expr } from "./lazy/expr";
import { Series } from "./series";
import { DataFrame } from "./dataframe";
/** @ignore */
export type ValueOrArray<T> = T | Array<ValueOrArray<T>>;
/** @ignore */
export type ColumnSelection = ValueOrArray<string>;
/** @ignore */
export type ExpressionSelection = ValueOrArray<Expr>;
/** @ignore */
export type ColumnsOrExpr = ColumnSelection | ExpressionSelection;
/** @ignore */
export type ExprOrString = Expr | string;
export type StartBy = "window" | "datapoint" | "monday";
/** @ignore */
export declare function columnOrColumns(columns: ColumnSelection | string | Array<string> | undefined): Array<string> | undefined;
/** @ignore */
export declare function columnOrColumnsStrict(...columns: string[] | ValueOrArray<string>[]): Array<string>;
/** @ignore */
export declare function selectionToExprList(columns: any[], stringToLit?: any): any[];
/** @ignore */
export declare function isPath(s: string, expectedExtensions?: string[]): boolean;
export declare const range: (start: number, end: number) => number[];
export declare const isDataFrameArray: (ty: any) => ty is DataFrame[];
export declare const isSeriesArray: <T>(ty: any) => ty is Series[];
export declare const isExprArray: (ty: any) => ty is Expr[];
export declare const isIterator: <T>(ty: any) => ty is Iterable<T>;
export declare const regexToString: (r: string | RegExp) => string;
export declare const INSPECT_SYMBOL: unique symbol;
