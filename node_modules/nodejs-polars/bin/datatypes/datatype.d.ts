import { Field } from "./field";
export declare abstract class DataType {
    get variant(): string;
    protected identity: string;
    protected get inner(): null | any[];
    equals(other: DataType): boolean;
    /** Null type */
    static get Null(): DataType;
    /** `true` and `false`. */
    static get Bool(): DataType;
    /** An `i8` */
    static get Int8(): DataType;
    /** An `i16` */
    static get Int16(): DataType;
    /** An `i32` */
    static get Int32(): DataType;
    /** An `i64` */
    static get Int64(): DataType;
    /** An `u8` */
    static get UInt8(): DataType;
    /** An `u16` */
    static get UInt16(): DataType;
    /** An `u32` */
    static get UInt32(): DataType;
    /** An `u64` */
    static get UInt64(): DataType;
    /** A `f32` */
    static get Float32(): DataType;
    /** A `f64` */
    static get Float64(): DataType;
    static get Date(): DataType;
    /** Time of day type */
    static get Time(): DataType;
    /** Type for wrapping arbitrary JS objects */
    static get Object(): DataType;
    /** A categorical encoding of a set of strings  */
    static get Categorical(): DataType;
    /**
     * Calendar date and time type
     * @param timeUnit any of 'ms' | 'ns' | 'us'
     * @param timeZone timezone string as defined by Intl.DateTimeFormat `America/New_York` for example.
     *
     */
    static Datetime(timeUnit: TimeUnit, timeZone?: any): DataType;
    static Datetime(timeUnit: "ms" | "ns" | "us", timeZone?: any): DataType;
    /**
     * Nested list/array type
     *
     * @param inner The `DataType` of values within the list
     *
     */
    static List(inner: DataType): DataType;
    /**
     * Struct type
     */
    static Struct(fields: Field[]): DataType;
    static Struct(fields: {
        [key: string]: DataType;
    }): DataType;
    /** A variable-length UTF-8 encoded string whose offsets are represented as `i64`. */
    static get Utf8(): DataType;
    toString(): string;
    toJSON(): {
        [x: string]: {
            [x: string]: any;
        };
    } | {
        [x: string]: string;
    };
    static from(obj: any): DataType;
}
declare class _Null extends DataType {
}
declare class _Bool extends DataType {
}
declare class _Int8 extends DataType {
}
declare class _Int16 extends DataType {
}
declare class _Int32 extends DataType {
}
declare class _Int64 extends DataType {
}
declare class _UInt8 extends DataType {
}
declare class _UInt16 extends DataType {
}
declare class _UInt32 extends DataType {
}
declare class _UInt64 extends DataType {
}
declare class _Float32 extends DataType {
}
declare class _Float64 extends DataType {
}
declare class _Date extends DataType {
}
declare class _Utf8 extends DataType {
}
declare class _Categorical extends DataType {
}
/**
 * Datetime type
 */
declare class _Datetime extends DataType {
    private timeUnit;
    private timeZone?;
    constructor(timeUnit: TimeUnit, timeZone?: string | undefined);
    get inner(): (string | undefined)[];
    equals(other: DataType): boolean;
}
declare class _List extends DataType {
    protected __inner: DataType;
    constructor(__inner: DataType);
    get inner(): DataType[];
    equals(other: DataType): boolean;
}
declare class _Struct extends DataType {
    private fields;
    constructor(inner: {
        [name: string]: DataType;
    } | Field[]);
    get inner(): Field[];
    equals(other: DataType): boolean;
    toJSON(): any;
}
/**
 * Datetime time unit
 */
export declare enum TimeUnit {
    Nanoseconds = "ns",
    Microseconds = "us",
    Milliseconds = "ms"
}
/**
 * @ignore
 * Timeunit namespace
 */
export declare namespace TimeUnit {
    function from(s: "ms" | "ns" | "us"): TimeUnit;
}
/**
 * Datatype namespace
 */
export declare namespace DataType {
    /** Null */
    type Null = _Null;
    /** Boolean */
    type Bool = _Bool;
    /** Int8 */
    type Int8 = _Int8;
    /** Int16 */
    type Int16 = _Int16;
    /** Int32 */
    type Int32 = _Int32;
    /** Int64 */
    type Int64 = _Int64;
    /** UInt8 */
    type UInt8 = _UInt8;
    /** UInt16 */
    type UInt16 = _UInt16;
    /** UInt32 */
    type UInt32 = _UInt32;
    /** UInt64 */
    type UInt64 = _UInt64;
    /** Float32 */
    type Float32 = _Float32;
    /** Float64 */
    type Float64 = _Float64;
    /** Date dtype */
    type Date = _Date;
    /** Datetime */
    type Datetime = _Datetime;
    /** Utf8 */
    type Utf8 = _Utf8;
    /** Categorical */
    type Categorical = _Categorical;
    /** List */
    type List = _List;
    /** Struct */
    type Struct = _Struct;
    /**
     * deserializes a datatype from the serde output of rust polars `DataType`
     * @param dtype dtype object
     */
    function deserialize(dtype: any): DataType;
}
export {};
